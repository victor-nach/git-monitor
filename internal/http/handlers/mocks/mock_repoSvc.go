// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/victor-nach/git-monitor/internal/http/handlers (interfaces: repoSvc)
//
// Generated by this command:
//
//	mockgen -destination=./internal/http/handlers/mocks/mock_repoSvc.go -package=mocks github.com/victor-nach/git-monitor/internal/http/handlers repoSvc
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/victor-nach/git-monitor/internal/domain/models"
	gomock "go.uber.org/mock/gomock"
)

// MockrepoSvc is a mock of repoSvc interface.
type MockrepoSvc struct {
	ctrl     *gomock.Controller
	recorder *MockrepoSvcMockRecorder
	isgomock struct{}
}

// MockrepoSvcMockRecorder is the mock recorder for MockrepoSvc.
type MockrepoSvcMockRecorder struct {
	mock *MockrepoSvc
}

// NewMockrepoSvc creates a new mock instance.
func NewMockrepoSvc(ctrl *gomock.Controller) *MockrepoSvc {
	mock := &MockrepoSvc{ctrl: ctrl}
	mock.recorder = &MockrepoSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrepoSvc) EXPECT() *MockrepoSvcMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockrepoSvc) Create(ctx context.Context, RepoInfo models.RepoInfo, since *time.Time) (models.Repository, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, RepoInfo, since)
	ret0, _ := ret[0].(models.Repository)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockrepoSvcMockRecorder) Create(ctx, RepoInfo, since any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockrepoSvc)(nil).Create), ctx, RepoInfo, since)
}

// List mocks base method.
func (m *MockrepoSvc) List(ctx context.Context) ([]models.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]models.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockrepoSvcMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockrepoSvc)(nil).List), ctx)
}

// Reset mocks base method.
func (m *MockrepoSvc) Reset(ctx context.Context, RepoInfo models.RepoInfo, startTime *time.Time) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", ctx, RepoInfo, startTime)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reset indicates an expected call of Reset.
func (mr *MockrepoSvcMockRecorder) Reset(ctx, RepoInfo, startTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockrepoSvc)(nil).Reset), ctx, RepoInfo, startTime)
}

// UpdateStatus mocks base method.
func (m *MockrepoSvc) UpdateStatus(ctx context.Context, RepoInfo models.RepoInfo, isActive *bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, RepoInfo, isActive)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockrepoSvcMockRecorder) UpdateStatus(ctx, RepoInfo, isActive any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockrepoSvc)(nil).UpdateStatus), ctx, RepoInfo, isActive)
}
