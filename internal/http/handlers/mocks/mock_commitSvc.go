// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/victor-nach/git-monitor/internal/http/handlers (interfaces: commitSvc)
//
// Generated by this command:
//
//	mockgen -destination=./internal/http/handlers/mocks/mock_commitSvc.go -package=mocks github.com/victor-nach/git-monitor/internal/http/handlers commitSvc
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/victor-nach/git-monitor/internal/domain/models"
	gomock "go.uber.org/mock/gomock"
)

// MockcommitSvc is a mock of commitSvc interface.
type MockcommitSvc struct {
	ctrl     *gomock.Controller
	recorder *MockcommitSvcMockRecorder
	isgomock struct{}
}

// MockcommitSvcMockRecorder is the mock recorder for MockcommitSvc.
type MockcommitSvcMockRecorder struct {
	mock *MockcommitSvc
}

// NewMockcommitSvc creates a new mock instance.
func NewMockcommitSvc(ctrl *gomock.Controller) *MockcommitSvc {
	mock := &MockcommitSvc{ctrl: ctrl}
	mock.recorder = &MockcommitSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcommitSvc) EXPECT() *MockcommitSvcMockRecorder {
	return m.recorder
}

// GetTopAuthors mocks base method.
func (m *MockcommitSvc) GetTopAuthors(ctx context.Context, RepoInfo models.RepoInfo, limit int) ([]models.AuthorStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopAuthors", ctx, RepoInfo, limit)
	ret0, _ := ret[0].([]models.AuthorStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopAuthors indicates an expected call of GetTopAuthors.
func (mr *MockcommitSvcMockRecorder) GetTopAuthors(ctx, RepoInfo, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopAuthors", reflect.TypeOf((*MockcommitSvc)(nil).GetTopAuthors), ctx, RepoInfo, limit)
}

// List mocks base method.
func (m *MockcommitSvc) List(ctx context.Context, RepoInfo models.RepoInfo, pagination models.PaginationReq) ([]models.Commit, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, RepoInfo, pagination)
	ret0, _ := ret[0].([]models.Commit)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockcommitSvcMockRecorder) List(ctx, RepoInfo, pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockcommitSvc)(nil).List), ctx, RepoInfo, pagination)
}
